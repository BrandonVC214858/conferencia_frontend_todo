// üìã Ejemplos de Uso - FastAPI Integration
// Este archivo muestra c√≥mo usar los servicios integrados con FastAPI

import { todoService } from './src/services/todoService.js';

// ============================================
// 1. üìù CREAR UN NUEVO TODO
// ============================================

async function createTodoExample() {
  try {
    const newTodo = {
      title: "Completar integraci√≥n FastAPI",
      description: "Implementar todos los endpoints y pruebas",
      completed: false
    };

    const result = await todoService.createTodo(newTodo);
    console.log('‚úÖ Todo creado:', result);
    
    // Respuesta esperada:
    // {
    //   "id": 1,
    //   "title": "Completar integraci√≥n FastAPI", 
    //   "description": "Implementar todos los endpoints y pruebas",
    //   "completed": false,
    //   "created_at": "2025-09-24T10:00:00Z",
    //   "updated_at": "2025-09-24T10:00:00Z"
    // }

  } catch (error) {
    console.error('‚ùå Error al crear todo:', error);
  }
}

// ============================================
// 2. üìñ OBTENER TODOS LOS TODOS
// ============================================

async function getAllTodosExample() {
  try {
    const todos = await todoService.getTodos();
    console.log('üìã Lista de todos:', todos);
    
    // Respuesta esperada: Array de todos
    // [
    //   {
    //     "id": 1,
    //     "title": "Mi primera tarea",
    //     "description": "Descripci√≥n de ejemplo",
    //     "completed": false,
    //     "created_at": "2025-09-24T10:00:00Z",
    //     "updated_at": "2025-09-24T10:00:00Z"
    //   },
    //   ...
    // ]

  } catch (error) {
    console.error('‚ùå Error al obtener todos:', error);
  }
}

// ============================================
// 3. üîç OBTENER UN TODO ESPEC√çFICO
// ============================================

async function getTodoByIdExample(todoId) {
  try {
    const todo = await todoService.getTodo(todoId);
    console.log('üîç Todo espec√≠fico:', todo);

  } catch (error) {
    if (error.status === 404) {
      console.error('‚ùå Todo no encontrado');
    } else {
      console.error('‚ùå Error al obtener todo:', error);
    }
  }
}

// ============================================
// 4. ‚úèÔ∏è ACTUALIZAR UN TODO
// ============================================

async function updateTodoExample(todoId) {
  try {
    const updatedData = {
      title: "T√≠tulo actualizado",
      description: "Nueva descripci√≥n actualizada", 
      completed: true
    };

    const result = await todoService.updateTodo(todoId, updatedData);
    console.log('‚úèÔ∏è Todo actualizado:', result);

  } catch (error) {
    if (error.status === 404) {
      console.error('‚ùå Todo no encontrado para actualizar');
    } else if (error.status === 422) {
      console.error('‚ùå Datos inv√°lidos:', error.details);
    } else {
      console.error('‚ùå Error al actualizar todo:', error);
    }
  }
}

// ============================================
// 5. üîÑ ALTERNAR ESTADO COMPLETADO
// ============================================

async function toggleTodoExample(todoId) {
  try {
    const result = await todoService.toggleTodo(todoId);
    console.log('üîÑ Estado alternado:', result);

  } catch (error) {
    console.error('‚ùå Error al alternar estado:', error);
  }
}

// ============================================
// 6. üóëÔ∏è ELIMINAR UN TODO
// ============================================

async function deleteTodoExample(todoId) {
  try {
    await todoService.deleteTodo(todoId);
    console.log('üóëÔ∏è Todo eliminado exitosamente');

  } catch (error) {
    if (error.status === 404) {
      console.error('‚ùå Todo no encontrado para eliminar');
    } else {
      console.error('‚ùå Error al eliminar todo:', error);
    }
  }
}

// ============================================
// 7. ‚ù§Ô∏è HEALTH CHECK
// ============================================

async function healthCheckExample() {
  try {
    const health = await todoService.healthCheck();
    console.log('‚ù§Ô∏è API saludable:', health);

  } catch (error) {
    console.error('üíî API no disponible:', error);
  }
}

// ============================================
// 8. ‚úÖ VALIDACI√ìN DE DATOS
// ============================================

function validateTodoExample() {
  const todoData = {
    title: "", // ‚ùå T√≠tulo vac√≠o
    description: "a".repeat(1025) // ‚ùå Descripci√≥n muy larga
  };

  const validation = todoService.validateTodo(todoData);
  
  if (!validation.isValid) {
    console.log('‚ùå Errores de validaci√≥n:', validation.errors);
    // Output:
    // {
    //   title: 'El t√≠tulo es requerido',
    //   description: 'La descripci√≥n no puede exceder 1024 caracteres'
    // }
  } else {
    console.log('‚úÖ Datos v√°lidos');
  }
}

// ============================================
// 9. üéØ EJEMPLO COMPLETO DE USO
// ============================================

async function completeWorkflowExample() {
  try {
    // 1. Verificar que la API est√© disponible
    console.log('üîç Verificando estado de la API...');
    await healthCheckExample();

    // 2. Crear un nuevo todo
    console.log('üìù Creando nuevo todo...');
    const newTodo = await todoService.createTodo({
      title: "Tarea de ejemplo",
      description: "Esta es una tarea de prueba",
      completed: false
    });

    // 3. Obtener todos los todos
    console.log('üìã Obteniendo lista completa...');
    const todos = await todoService.getTodos();

    // 4. Actualizar el todo reci√©n creado
    console.log('‚úèÔ∏è Actualizando todo...');
    await todoService.updateTodo(newTodo.id, {
      title: "Tarea actualizada",
      description: "Descripci√≥n actualizada",
      completed: false
    });

    // 5. Alternar su estado
    console.log('üîÑ Alternando estado...');
    await todoService.toggleTodo(newTodo.id);

    // 6. Finalmente eliminarlo (opcional)
    console.log('üóëÔ∏è Eliminando todo...');
    // await todoService.deleteTodo(newTodo.id);

    console.log('üéâ Flujo completo exitoso!');

  } catch (error) {
    console.error('‚ùå Error en el flujo:', error);
  }
}

// ============================================
// 10. üîß MANEJO DE ERRORES AVANZADO
// ============================================

async function advancedErrorHandlingExample() {
  try {
    await todoService.getTodo(999); // ID que no existe
    
  } catch (error) {
    // Manejo espec√≠fico por tipo de error
    switch(error.status) {
      case 404:
        console.log('üîç El todo solicitado no existe');
        break;
      case 422:
        console.log('üìã Datos de entrada inv√°lidos:', error.details);
        break;
      case 0:
        console.log('üåê Sin conexi√≥n con el servidor');
        console.log('üí° Verifica que FastAPI est√© ejecut√°ndose en http://localhost:8000');
        break;
      default:
        console.log('‚ö†Ô∏è Error inesperado:', error.message);
    }
  }
}

// ============================================
// üöÄ EJECUTAR EJEMPLOS
// ============================================

// Descomenta las l√≠neas que quieras probar:

// createTodoExample();
// getAllTodosExample();
// getTodoByIdExample(1);
// updateTodoExample(1);
// toggleTodoExample(1);
// deleteTodoExample(1);
// healthCheckExample();
// validateTodoExample();
// completeWorkflowExample();
// advancedErrorHandlingExample();

export {
  createTodoExample,
  getAllTodosExample,
  getTodoByIdExample,
  updateTodoExample,
  toggleTodoExample,
  deleteTodoExample,
  healthCheckExample,
  validateTodoExample,
  completeWorkflowExample,
  advancedErrorHandlingExample
};